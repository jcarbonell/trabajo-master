scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score)
}
# SUMMARY
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
head(score)
score_matrix_frame
head(score_matrix_frame)
head(score_matrix_frame2)
scores_frames <- list()
for(i in 1:length(interactomes)){
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score)
}
source("score.r")
scores_frames <- list()
for(i in 1:length(interactomes)){
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score)
}
# SUMMARY
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
score_matrix_frame
score_matrix_frame2 <- scores_frames
score_matrix_frame2 <- score_matrix_frame
source("score.r")
ores_frames <- list()
for(i in 1:length(interactomes)){
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score)
}
# SUMMARY
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
score_matrix_frame
##********************************************************##
##    LPA report                                          ##
##********************************************************##
gene_list_files <- c(
"../data/sma/sma_disease_recessive_selected_genes_maf01.txt",
"../data/sma/sma_activator_dominant_gene_list.txt"
)
group_names <- c("DISEASE_RECESSIVE","ACTIVATOR_DOMINANT")
# Output data
# algorithm params
numinterm <- 1
zero_intermediates <- TRUE
# output
network_outdir <- "../executions/sma"
source("igraph_utils.R")
source("nh_simulation_lib.R")
source("shortestpath-mariangela.R")
source("nh_lib.R")
source("score.r")
source("utils.r")
home_path <- getwd()
# FAMILY GENES LOADING
raw_gene_list <- load_family_genes(group_names,gene_list_files)
genes_by_family <- lapply(raw_gene_list,length)
all_raw_genes <- unique(unlist(raw_gene_list))
# INTERACTOMES LOADING
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
ninteractomes <- length(interactomes)
raw_gene_list
scores_frames <- list()
for(i in 1:length(interactomes)){
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score)
}
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
score_matrix_frame
head(score_matrix_frame)
hist(score_matrix_frame$global_score)
hist(score_matrix_frame$global_score,20)
outdir
network_outdir
write.table(score_matrix_frame,file="score_matrix.txt",sep="\t",quote=F)
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
if(!file.exists(network_outdir)){
dir.create(network_outdir)
}
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
a <- c("1")
b <- c("3","5","2")
setdiff(a,b)
b <- c("3","1","2")
setdiff(a,b)
setdiff(b,a)
b <- c("3","7","2")
setdiff(b,a)
source("score.r")
scores_frames <- list()
for(i in 1:length(interactomes)){
cat("Computing score with ",names(interactomes)[i],"interactome\n")
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score2)
}
score_matrix_frame
# SUMMARY
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
score_matrix_frame
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
gene_list_files <- c(
"../data/sma/known_genes.txt",
"../data/sma/sma_disease_recessive_selected_genes_maf01.txt",
"../data/sma/sma_activator_dominant_gene_list.txt"
)
group_names <- c("DISEASE_RECESSIVE","ACTIVATOR_DOMINANT","Known_genes")
# Output data
# algorithm params
numinterm <- 1
zero_intermediates <- TRUE
# output
network_outdir <- "../executions/sma"
if(!file.exists(network_outdir)){
dir.create(network_outdir)
}
source("igraph_utils.R")
source("nh_simulation_lib.R")
source("shortestpath-mariangela.R")
source("nh_lib.R")
source("score.r")
source("utils.r")
home_path <- getwd()
# FAMILY GENES LOADING
raw_gene_list <- load_family_genes(group_names,gene_list_files)
genes_by_family <- lapply(raw_gene_list,length)
all_raw_genes <- unique(unlist(raw_gene_list))
# INTERACTOMES LOADING
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
ninteractomes <- length(interactomes)
# SUB-NETWORK INITIALIZATION
#subnets <- get_subnets(all_raw_genes,interactomes,5)
# distance_matrices <- list()
# for(i in 1:length(interactomes)){
#   cat("Computing distance matrix" ,names(interactomes)[i],"...\n")
#   distance_matrices[[ names(interactomes)[i] ]] <- compute_distance_matrix(interactomes[[i]])
#   cat("      cleaning memory...\n")
#   gc()
# }
# SCORE COMPUTATION
scores_frames <- list()
for(i in 1:length(interactomes)){
cat("Computing score with",names(interactomes)[i],"interactome\n")
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score2)
}
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
gene_list_files <- c(
"../data/sma/known_genes.txt",
"../data/sma/sma_disease_recessive_selected_genes_maf01.txt",
"../data/sma/sma_activator_dominant_gene_list.txt"
)
group_names <- c("Known_genes","DISEASE_RECESSIVE","ACTIVATOR_DOMINANT")
# Output data
# algorithm params
numinterm <- 1
zero_intermediates <- TRUE
# output
network_outdir <- "../executions/sma"
if(!file.exists(network_outdir)){
dir.create(network_outdir)
}
source("igraph_utils.R")
source("nh_simulation_lib.R")
source("shortestpath-mariangela.R")
source("nh_lib.R")
source("score.r")
source("utils.r")
home_path <- getwd()
# FAMILY GENES LOADING
raw_gene_list <- load_family_genes(group_names,gene_list_files)
genes_by_family <- lapply(raw_gene_list,length)
all_raw_genes <- unique(unlist(raw_gene_list))
# INTERACTOMES LOADING
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
ninteractomes <- length(interactomes)
# SUB-NETWORK INITIALIZATION
#subnets <- get_subnets(all_raw_genes,interactomes,5)
# distance_matrices <- list()
# for(i in 1:length(interactomes)){
#   cat("Computing distance matrix" ,names(interactomes)[i],"...\n")
#   distance_matrices[[ names(interactomes)[i] ]] <- compute_distance_matrix(interactomes[[i]])
#   cat("      cleaning memory...\n")
#   gc()
# }
# SCORE COMPUTATION
scores_frames <- list()
for(i in 1:length(interactomes)){
cat("Computing score with",names(interactomes)[i],"interactome\n")
scores_frames[[ names(interactomes)[i] ]] <- compute_score(raw_gene_list,interactomes[[i]],default_score2)
}
# SUMMARY
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[scored_genes]
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
scores_frames[["binding"]]
scores_frames[[1]]$distance_priors
scores_frames[[1]]$uninteractor_ratio
scores_frames[[1]]$score_table
scores_frames[[1]]$score_table["CARD8",]
scores_frames[[2]]$score_table["CARD8",]
scores_frames[[3]]$score_table["CARD8",]
scores_frames[[4]]$score_table["CARD8",]
scores_frames[[5]]$score_table["CARD8",]
scores_frames[[i]]$fam_hits
scores_frames[[i]]$fam_hits["CARD8"]
head(score_matrix_frame)
score_matrix_frame["CARD8"]
score_matrix_frame["CARD8",]
head(scored_genes)
scores_frames[[i]]$fam_hits["CARD8"]
scored_genes <- unique(unlist(lapply(scores_frames,function(score_frame) return(rownames(score_frame$score_table)))))
score_matrix <- matrix(rep(0,length(scored_genes)*ninteractomes),ncol=ninteractomes)
rownames(score_matrix) <- scored_genes
colnames(score_matrix) <- names(interactomes)
for(i in 1:ninteractomes){
score_matrix[,i] <- scores_frames[[i]]$score_table[scored_genes,"score"]
}
global_score <- rowSums(score_matrix)
score_rank <- order(global_score,decreasing=T)
score_matrix <- cbind(global_score,score_matrix)
score_matrix <- score_matrix[score_rank,]
score_matrix_frame <- as.data.frame(score_matrix)
head(score_matrix_frame)
head(scored_genes)
rownames(score_matrix)
head(rownames(score_matrix))
score_matrix_frame$fams <- scores_frames[[i]]$fam_hits[rownames(score_matrix)]
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F)
source("utils.r")
source("sma_report.R")
source("interactome_analysis.R")
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F,row.names=F)
write.table(score_matrix_frame,file=paste(network_outdir,"/score_matrix.txt",sep=""),sep="\t",quote=F,col.names=F)
score_matrix_file <- paste(network_outdir,"/score_matrix.txt",sep="")
write(paste("gene\t",paste(colnames(score_matrix_frame),collapse="\t"),sep=""),file=score_matrix_file)
write.table(score_matrix_frame,file=score_matrix_file,sep="\t",quote=F,col.names=F,append=F)
score_matrix_file <- paste(network_outdir,"/score_matrix.txt",sep="")
write(paste("gene\t",paste(colnames(score_matrix_frame),collapse="\t"),sep=""),file=score_matrix_file)
write.table(score_matrix_frame,file=score_matrix_file,sep="\t",quote=F,col.names=F,append=T)
##********************************************************##
##    LPA report                                          ##
##********************************************************##
gene_list_files <- c(
"../data/sma/known_genes.txt",
"../data/sma/sma_disease_recessive_selected_genes_maf01.txt",
"../data/sma/sma_activator_dominant_gene_list.txt"
)
group_names <- c("Known_genes","DISEASE_RECESSIVE","ACTIVATOR_DOMINANT")
# Output data
# algorithm params
numinterm <- 1
zero_intermediates <- TRUE
# output
network_outdir <- "../executions/sma"
if(!file.exists(network_outdir)){
dir.create(network_outdir)
}
source("sma_report.R")
source("interactome_analysis.R")
misgenes <- names(score_matrix)
head(misgenes)
misgenes <- rownames(score_matrix)
head(misgenes)
subnet_binding <- get_subnet(misgenes,interactomes[["binding"]],ninter=1)
subnet_binding
wc -l subnet_binding
nrow(subnet_binding)
supersubnets <- get_subnets(misgenes,interactomes,ninter=1)
supersubnets$binding
lapply(supersubnets,length)
length(supersubnets$binding)
lapply(supersubnets,nrow)
head(misgenes)
write.table(supersubnets$binding,file="/home/jose/Dropbox/trabajo_master/disease_score/executions/sma/binding_subnet.txt",quote=F,sep="\t",col.names=F,row.names=F)
write.table(supersubnets$functional,file="/home/jose/Dropbox/trabajo_master/disease_score/executions/sma/functional_subnet.txt",quote=F,sep="\t",col.names=F,row.names=F)
write.table(supersubnets$ptmod,file="/home/jose/Dropbox/trabajo_master/disease_score/executions/sma/ptmod_subnet.txt",quote=F,sep="\t",col.names=F,row.names=F)
write.table(supersubnets$regulation,file="/home/jose/Dropbox/trabajo_master/disease_score/executions/sma/regulation_subnet.txt",quote=F,sep="\t",col.names=F,row.names=F)
write.table(supersubnets$textmining,file="/home/jose/Dropbox/trabajo_master/disease_score/executions/sma/textmining_subnet.txt",quote=F,sep="\t",col.names=F,row.names=F)
score_matrix_frame$fams["ABL1"]
score_matrix_frame$fams["TLR4"]
score_matrix_frame["TLR4","fams"]
score_matrix_frame["ABL1","fams"]
all_subnets <- read.table("../executions/sma/all_subnets.txt",header=F,stringsAsFactors=F)
head(all_subnets)
all_subnet_nodes <- unique(c(all_subnets$V1,all_subnets$V3))
length(all_subnet_nodes)
all_subnet_info <- data.frame(gene=all_subnet_nodes,global_score=score_matrix_frame[all_subnet_nodes,"global_score"],fams=score_matrix_frame[all_subnet_nodes,"fams"])
head(all_subnet_info)
head(all_subnet_info,50)
all_subnet_info[which(is.na(all_subnet_info$global_score)),"global_score"] <- 0
head(all_subnet_info)
all_subnet_info[which(is.na(all_subnet_info$fams)),"fams"] <- "INTER"
all_subnet_info <- data.frame(gene=all_subnet_nodes,global_score=score_matrix_frame[all_subnet_nodes,"global_score"],fams=score_matrix_frame[all_subnet_nodes,"fams"],stringAsFactors=F)
all_subnet_info[which(is.na(all_subnet_info$global_score)),"global_score"] <- 0
all_subnet_info[which(is.na(all_subnet_info$fams)),"fams"] <- "INTER"
head(all_subnet_info[which(is.na(all_subnet_info$fams)),"fams"])
all_subnet_info <- data.frame(gene=all_subnet_nodes,global_score=score_matrix_frame[all_subnet_nodes,"global_score"],fams=score_matrix_frame[all_subnet_nodes,"fams"],stringsAsFactors=F)
all_subnet_info[which(is.na(all_subnet_info$global_score)),"global_score"] <- 0
all_subnet_info[which(is.na(all_subnet_info$fams)),"fams"] <- "INTER"
head(all_subnet_info)
write.table(all_subnet_info,file="/home/jose/Dropbox/trabajo_master/disease_score/executions/sma/all_subnet_info.txt",quote=F,sep="\t",row.names=F)
gc()
source("shortestpath-mariangela.R")
source("score.r")
source("utils.r")
source("simulation.r")
source("evaluation.r")
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 20
nsims <- 100
score_functions <- c("default_score","default_score2","default_score3")
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
interactome <- interactomes[["binding"]]
distance_matrix <- compute_distance_matrix(interactome)
# do simulations
family_genes_set <- simulate_family_genes_set(nfams,ngenes,nsims,distance_matrix=distance_matrix)
sim1 <- simulate_and_evaluate(family_genes_set=family_genes_set,interactome=interactome,score_function_name=score_functions[1],distance_matrix=distance_matrix)
sim2 <- simulate_and_evaluate(family_genes_set=family_genes_set,interactome=interactome,score_function_name=score_functions[2],distance_matrix=distance_matrix)
sim3 <- simulate_and_evaluate(family_genes_set=family_genes_set,interactome=interactome,score_function_name=score_functions[3],distance_matrix=distance_matrix)
sims <- list(sim1,sim2,sim3)
nscores <- length(sims)
# paint simulation trend
par(mfrow=c(1,nscores))
for(k in 1:nscores){
paint_simulation_trend(sims[[k]]$evaluation_list,label=score_functions[k])
}
# paint simulation trend comparison
paint_simulation_trend_comparison(sims,score_functions)
par(mfrow=c(1,nscores))
for(k in 1:nscores){
paint_score_groups(sims[[k]]$scores_frame_list,sims[[k]]$evaluation_list,label=score_functions[k])
}
paint_mrp_comparison(sims,score_functions)
install.packages("multicore")
library(multicore)
sim1 <- simulate_and_evaluate(nfams=3,ngenes=20,nsims=5,interactome=interactome,score_function_name=score_functions[1],distance_matrix=distance_matrix)
p1 <- parallel(simulate_and_evaluate(nfams=3,ngenes=20,nsims=5,interactome=interactome,score_function_name=score_functions[1],distance_matrix=distance_matrix))
p2 <- parallel(simulate_and_evaluate(nfams=3,ngenes=20,nsims=5,interactome=interactome,score_function_name=score_functions[2],distance_matrix=distance_matrix))
cc <- collect(list(p1,p2))
cc
cc$5314
cc$5314
cc$
d
attributes(cc)
cc
cc[1]
cc[2]
cc[3]
sim1a <- cc[1]
sim1b <- cc[2]
sim1a$5314
sim1
sim1[[1]]
sim1[[2]]
sim1[1]
sim1[2]
attributes(sim1a)
attributes(sim1)
sim1a[1]
attributes(sim1[1])
attributes(sim1[2])
attributes(sim1[[1]])
class(sim1[1])
class(sim1)
class(sim1a)
class(sim1a[1])
class(sim1[1])
class(sim1a[[1]])
sim1a[[1]]
sim1a[[2]]
class(cc)
length(cc)
length(cc[[1]])
sim1a <- cc[[1]]
sim2a <- cc[[2]]
sim1a$score_function_name
sim1$score_function_name
sim1a$scores_frame_list
length(sim1a$scores_frame_list)
length(sim1$scores_frame_list)
?collect
p1 <- parallel(simulate_and_evaluate(family_genes_set=family_genes_set,interactome=interactome,score_function_name=score_functions[1],distance_matrix=distance_matrix))
p2 <- parallel(simulate_and_evaluate(family_genes_set=family_genes_set,interactome=interactome,score_function_name=score_functions[2],distance_matrix=distance_matrix))
p3 <- parallel(simulate_and_evaluate(family_genes_set=family_genes_set,interactome=interactome,score_function_name=score_functions[3],distance_matrix=distance_matrix))
sims <- collect(list(p1,p2,p3))
length(sims)
sims[[1]]$score_function_name
sims[[2]]$score_function_name
raw <- read.table("../misc/ensg2hgnc.txt",sep="\t",quote=F,header=T)
raw <- read.delim("../misc/ensg2hgnc.txt",sep="\t",quote=F,header=T)
raw <- read.delim("../misc/ensg2hgnc.txt",sep="\t",header=T)
head(raw)
nrow(raw)
length(raw$Ensembl.Gene.ID)
length(unique(raw$Ensembl.Gene.ID))
ens2hgnc <- raw$Associated.Gene.Name
names(ens2hgnc) <- raw$Ensembl.Gene.ID
ens2hgnc["ENSG00000221855"]
raw <- read.delim("../misc/ensg2hgnc.txt",sep="\t",header=T,stringsAsFactors=F)
ens2hgnc <- raw$Associated.Gene.Name
names(ens2hgnc) <- raw$Ensembl.Gene.ID
data <- read.delim("../data/sma/para_luz/sma_activator_dominant_selected_genes_maf01.ranking",sep="\t",header=T,stringsAsFactors=F)
head(data)
data <- read.delim("../data/sma/para_luz/sma_activator_dominant_selected_genes_maf01.ranking",sep="\t",header=F,stringsAsFactors=F)
data$hgnc <-ens2hgnc[data[,1]]
head(data)
write.table(data,file=outfile,quote=F,row.names=F,col.names=F,sep="\t")
ens2hgnc_file <- "../misc/ensg2hgnc.txt"
data_file <- "../data/sma/para_luz/sma_activator_dominant_selected_genes_maf01.ranking"
outfile <- NULL
ens_col <- 1
if(is.null(outfile)){
outfile <- paste(data_file,".hgnc",sep="")
}
write.table(data,file=outfile,quote=F,row.names=F,col.names=F,sep="\t")
add_hgnc_symbol <- function(ens2hgnc_file,data_file,ens_col,outfile=NULL){
if(is.null(outfile)){
outfile <- paste(data_file,".hgnc",sep="")
}
raw <- read.delim(ens2hgnc_file,sep="\t",header=T,stringsAsFactors=F)
ens2hgnc <- raw$Associated.Gene.Name
names(ens2hgnc) <- raw$Ensembl.Gene.ID
data <- read.delim(data_file,sep="\t",header=F,stringsAsFactors=F)
data$hgnc <-ens2hgnc[data[,1]]
write.table(data,file=outfile,quote=F,row.names=F,col.names=F,sep="\t")
}
add_hgnc_symbol("../misc/ensg2hgnc.txt","../data/sma/para_luz/sma_disease_recessive_selected_genes_maf01.ranking",ens_col=1)
add_hgnc_symbol("../misc/ensg2hgnc.txt","../data/sma/para_luz/sma_disease_recessive_selected_genes.ranking",ens_col=1)
add_hgnc_symbol("../misc/ensg2hgnc.txt","../data/sma/para_luz/sma_activator_dominant_selected_genes.ranking",ens_col=1)
