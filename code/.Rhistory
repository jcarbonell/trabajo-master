ls()
source("multi_interactome_test.r")
source("multi_interactome_test.r")
interactomes <- interactomes$textmining
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
# run and evaluate
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
# paint evaluation
paint_global_scores(sre$score_runs)
paint_score_density(sre$score_runs[[1]],label=score_function_names[1])
paint_score_density(sre$score_runs[[2]],label=score_function_names[2])
interactomes <- list(interactomes$textmining)
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
head(interactomes)
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
interactomes <- list(interactomes$textmining)
head(interactomes)
interactomes <- list(textmining=interactomes$textmining)
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
interactomes <- list(textmining=interactomes$textmining)
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
getwd()
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 200
nsims <- 10
score_function_names <- c("default_score2","default_score3","default_score4")
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
interactomes <- list(textmining=interactomes$textmining)
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
# run and evaluate
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
paint_global_scores(sre$score_runs)
paint_score_density(sre$score_runs[[2]],label=score_function_names[2])
paint_score_density(sre$score_runs[[3]],label=score_function_names[3])
paint_score_density(sre$score_runs[[2]],label=score_function_names[2])
paint_score_density(sre$score_runs[[1]],label=score_function_names[1])
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
source("lib/random_walk.r")
library(igraph)
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 200
nsims <- 100
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
#net <- simplify(graph.data.frame(interactomes$binding[,c(1,3)],directed=FALSE))
net <- get.igraph("../interactomes/binding_hgnc.sif")
#net <- get.igraph("../interactomes/textmining_hgnc.sif")
ad_matrix <- get.column.normalized.adjency.matrix(net)
all_rel_pos <- c()
jnf_all_rel_pos <- c()
for(sim in 1:nsims){
cat("sim",sim,"...\n")
# rw
cat("     rw\n")
all_genes <- unique(unlist(family_set_series[[sim]]$raw_gene_list))
scores <- numeric(length(all_genes))
names(scores) <- all_genes
for(i in 1:family_set_series[[sim]]$nfams) {
fam_genes <- family_set_series[[sim]]$raw_gene_list[[i]]
rest_of_genes <- setdiff(all_genes,fam_genes)
rw <- RandomWalk.with.restart(fam_genes,rest_of_genes,ad_matrix,prob.restart=0.3,thresh=1e-06,max.iter=16)
fam_scores <- rw$final.prob
scores[fam_genes] <- scores[fam_genes] + fam_scores
}
sorted_scores <- sort(scores,decreasing=T)
rel_pos <- lapply(family_set_series[[sim]]$fam_disease_genes, function(x) which(names(sorted_scores)==x)/length(sorted_scores))
all_rel_pos <- rbind(all_rel_pos,rel_pos)
#jnf
cat("     jnf\n")
jnf <- compute_score(family_set_series[[sim]]$raw_gene_list,interactomes$binding,default_score3,test.inter=F,verbose=F)
jnf_scores <- jnf$score_table$score
names(jnf_scores) <- jnf$score_table$gene
sorted_jnf_scores <- sort(jnf_scores,decreasing=T)
jnf_rel_pos <- lapply(family_set_series[[sim]]$fam_disease_genes, function(x) which(names(sorted_jnf_scores)==x)/length(sorted_jnf_scores))
jnf_all_rel_pos <- rbind(jnf_all_rel_pos,jnf_rel_pos)
}
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
par(mar=c(5,5,5,5))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
par(mar=c(5,5,15,5))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
par(mar=c(5,5,5,15))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
par(mar=c(15,5,5,5))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
par(mar=c(5,5,5,2))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
source("lib/random_walk.r")
library(igraph)
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 200
nsims <- 100
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
#net <- simplify(graph.data.frame(interactomes$binding[,c(1,3)],directed=FALSE))
#net <- get.igraph("../interactomes/binding_hgnc.sif")
net <- get.igraph("../interactomes/textmining_hgnc.sif")
ad_matrix <- get.column.normalized.adjency.matrix(net)
all_rel_pos <- c()
jnf_all_rel_pos <- c()
for(sim in 1:nsims){
cat("sim",sim,"...\n")
# rw
cat("     rw\n")
all_genes <- unique(unlist(family_set_series[[sim]]$raw_gene_list))
scores <- numeric(length(all_genes))
names(scores) <- all_genes
for(i in 1:family_set_series[[sim]]$nfams) {
fam_genes <- family_set_series[[sim]]$raw_gene_list[[i]]
rest_of_genes <- setdiff(all_genes,fam_genes)
rw <- RandomWalk.with.restart(fam_genes,rest_of_genes,ad_matrix,prob.restart=0.3,thresh=1e-06,max.iter=16)
fam_scores <- rw$final.prob
scores[fam_genes] <- scores[fam_genes] + fam_scores
}
sorted_scores <- sort(scores,decreasing=T)
rel_pos <- lapply(family_set_series[[sim]]$fam_disease_genes, function(x) which(names(sorted_scores)==x)/length(sorted_scores))
all_rel_pos <- rbind(all_rel_pos,rel_pos)
#jnf
cat("     jnf\n")
jnf <- compute_score(family_set_series[[sim]]$raw_gene_list,interactomes$textmining,default_score3,test.inter=F,verbose=F)
jnf_scores <- jnf$score_table$score
names(jnf_scores) <- jnf$score_table$gene
sorted_jnf_scores <- sort(jnf_scores,decreasing=T)
jnf_rel_pos <- lapply(family_set_series[[sim]]$fam_disease_genes, function(x) which(names(sorted_jnf_scores)==x)/length(sorted_jnf_scores))
jnf_all_rel_pos <- rbind(jnf_all_rel_pos,jnf_rel_pos)
}
par(mar=c(5,5,5,2))
boxplot(list(RW=as.numeric(all_rel_pos),JNF=as.numeric(jnf_all_rel_pos)),main=paste(nsims,"simulations"),ylab="relative position in rank")
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
source("lib/random_walk.r")
library(igraph)
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 200
nsims <- 100
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
source("random_walk_test.r")
rm(list=ls())
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 200
nsims <- 10
score_function_names <- c("default_score2","default_score3","default_score4")
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
#interactomes <- list(textmining=interactomes$textmining)
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
# run and evaluate
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 20
nsims <- 10
score_function_names <- c("default_score2","default_score3","default_score4")
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
#interactomes <- list(textmining=interactomes$textmining)
# simulate family set series
if(with_known_genes){
all_genes <- read.table("../misc/all_hgnc_symbols.txt",header=F,stringsAsFactors=F)$V1
family_set_series <- simulate_known_family_set_series(paste(home_path,"/../misc/omim_clean_annot.txt",sep=""),all_genes,nfams=nfams,ngenes=ngenes,nsims=nsims)
} else {
meta_interactome  <- get_meta_interactome(interactomes)
meta_interactome_matrix <- compute_distance_matrix(head(meta_interactome,50000))
family_set_series <- simulate_family_set_series(nfams=nfams,ngenes=ngenes,nsims=nsims,distance_matrix=meta_interactome_matrix)
}
# run and evaluate
sre <- run_and_evaluate(family_set_series,interactomes,score_function_names=score_function_names,global_score_methods=global_score_methods,test.inter=F)
# paint evaluation
paint_global_scores(sre$score_runs)
sre$info
sre$score_runs$default_score3$multi_score_list
sre$score_runs$default_score3$multi_score_list[[1]]$global_score_table
sre$score_runs$default_score3$multi_score_list[[1]]$global_score_table
sre$score_runs$default_score3$multi_score_list[[1]]$global_score_frame
net <- get.igraph("../interactomes/binding_hgnc.sif")
source("lib/random_walk.r")
library(igraph)
net <- get.igraph("../interactomes/binding_hgnc.sif")
ad_matrix <- get.column.normalized.adjency.matrix(net)
head(ad_matrix)
class(ad_matrix)
ad_matrix[1:6,1:5]
write.file(ad_matrix,file="../interactomes/binding_hgnc.am",sep="\t",quote=F,row.names=T,col.names=T)
write.table(ad_matrix,file="../interactomes/binding_hgnc.am",sep="\t",quote=F,row.names=T,col.names=T)
sum(ad_matrix==0)
sum(ad_matrix!=0)
sum(ad_matrix!=0)/sum(ad_matrix==0)
ad_matrix_file <- "../interactomes/binding_hgnc.am.gz"
ad_matrix <- read.delim(gzip(ad_matrix_file),sep="\t",header=T,row.names=T)
ad_matrix <- read.delim(gzfile(ad_matrix_file),sep="\t",header=T,row.names=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T)
head(a)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,rownames=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,rowNames=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T)
a
?read.delim
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,names=F)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,col.names=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=T)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T)
a
rownames(a)
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=1)
a
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=1)
a
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=1)
a
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=1)
a
a <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",header=T,row.names=1)
a
ad_matrix <- NULL
gc()
gc()
gc()
gc()
gc()
rm(list=ls())
gc()
gc()
gc()
gc()
gc()
ls()
prev <- read.delim("../interactomes/binding_hgnc.am",sep="\t",stringsAsFactors=F,header=T,row.names=1,nrows=5)
ncol <- ncol(prev)
ncol
ad_matrix <- data.matrix(read.delim("../interactomes/binding_hgnc.am",sep="\t",stringsAsFactors=F,header=T,row.names=1,ncol=ncol)
)
before <- proc.time()
prev <- read.delim("../interactomes/binding_hgnc.am",sep="\t",stringsAsFactors=F,header=T,row.names=1,nrows=5)
ncol <- ncol(prev)
ad_matrix <- read.delim(
"../interactomes/binding_hgnc.am",
sep="\t",
stringsAsFactors=F,
header=T,
row.names=1,
comment.char=""
)
after <- proc.time()
cat((after-before)["elapsed"])
mini <- read.delim("../interactomes/binding_hgnc.mini",sep="\t",stringsAsFactors=F,header=T,row.names=1,colClasses="character")
before <- proc.time()
prev <- read.delim("../interactomes/binding_hgnc.am",sep="\t",stringsAsFactors=F,header=T,row.names=1,nrows=5)
ncol <- ncol(prev)
ad_matrix <- read.delim(
"../interactomes/binding_hgnc.am",
sep="\t",
stringsAsFactors=F,
header=T,
row.names=1,
comment.char="",
nrow=10000
)
after <- proc.time()
cat((after-before)["elapsed"])
mat <- scan(file="../interactomes/binding_hgnc.mini")
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1,row.names=1)
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1,rownames=1)
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1)
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1,what=c("character",rep("decimal",9)))
nat
mat
mat <- scan(file="../interactomes/binding_hgnc.mini",what=c("character",rep("decimal",9)))
mat
mat
mat <- scan(file="../interactomes/binding_hgnc.mini",what=c("character",rep("decimal",10)))
mat
matc("character",rep("decimal",10)
)
c("character",rep("decimal",10)
)
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1,what=c("character",rep("decimal",10)))
mat
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1,what=c("character",rep("decimal",9)))
mat
mat <- scan(file="../interactomes/binding_hgnc.mini",skip=1,what=c("character",rep("decimal",10)))
mat
scan(file="../interactomes/binding_hgnc.mini",skip=1,what=c("character",rep("decimal",10)))
scan(file="../interactomes/binding_hgnc.mini",skip=1)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character")
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t")
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T,data=10)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T,data=9)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T,n=9)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T,nmax=9)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\n",fill=T,nmax=9)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T,nmax=9)
scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T)
as.matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,what="character",sep="\t",fill=T),ncol=9)
system.time(a <- matrix(scan(file="../interactomes/binding_hgnc.am",skip=1,what="character",sep="\t",fill=T),ncol=9))
a[1:10,1:4]
as.data.frame(a[1:10,1:4])
as.data.frame(a[1:10,1:4],header=T)
as.data.frame(a[1:10,1:4],col.names=1)
as.data.frame(a[1:10,1:4],colnames=1)
dim(a)
head(a)
b <- a[2:11513580,]
head(b)
cc <- data.matrix(b)
head(cc)
system.time(a <- matrix(scan(file="../interactomes/binding_hgnc.am",skip=1,what="decimal",sep="\t",fill=T),ncol=9))
a[1:5,1:5]
matrix(scan(file="../interactomes/binding_hgnc.am",skip=1,what="decimal",sep="\t",fill=T),ncol=9))
matrix(scan(file="../interactomes/binding_hgnc.am",skip=1,what="decimal",sep="\t",fill=T),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,what="decimal",sep="\t",fill=T),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,what="decimal",sep="\t"),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,what="real",sep="\t"),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini",skip=1,sep="\t"),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini2",skip=1,sep="\t"),ncol=9)
matrix(scan(file="../interactomes/binding_hgnc.mini2",skip=1,sep="\t"))
b <- matrix(scan(file="../interactomes/binding_hgnc.am2",skip=1,sep="\t"),ncol=10179)
system.time(b<- matrix(scan(file="../interactomes/binding_hgnc.am2",skip=1,sep="\t"),ncol=10179))
head(b)
b[1:10,1:10]
library(Matrix)
sparseMatrix(c(1,5),c(3,6),c(8,12))
sparseMatrix(c(1,5),c(3,6),x=c(8,12))
sparseMatrix(c(1,5),c(3,6),x=c(8,12))+ 1
sparseMatrix(c(1,5),c(3,6),x=c(8,12))*
4
class(sparseMatrix(c(1,5),c(3,6),x=c(8,12)))
class(sparseMatrix(c(1,5),c(3,6),x=c(8,12))+1)
class(sparseMatrix(c(1,5),c(3,6),x=c(8,12))+1) * 2
(sparseMatrix(c(1,5),c(3,6),x=c(8,12))+1) * 2
class((sparseMatrix(c(1,5),c(3,6),x=c(8,12))+1) * 2)
head(ad_matrix)
which(ad_matrix[1,]==1)
which(ad_matrix[1,]==3)
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
source("lib/shortestpath-mariangela.R")
source("lib/score.r")
source("lib/utils.r")
source("lib/simulation.r")
source("lib/evaluation.r")
source("lib/postprocess.r")
source("lib/random_walk.r")
library(igraph)
home_path <- getwd()
# input params
nfams <- 3
ngenes <- 200
nsims <- 100
global_score_methods <- c("no_zero_mean","no_zero_max")
with_known_genes <- T
# load interactomes
interactomes <- load_interactomes(paste(home_path,"/../interactomes/",sep=""))
net <- get.igraph("../interactomes/binding_hgnc.sif")
system.time(ad_matrix <- get.column.normalized.adjency.matrix(net))
gref <- names(ad_matrix)
head(gref)
gref <- colnames(ad_matrix)
head(gref)
length(gref)
index <- 1:length(gref)
names(index) <- gref
head(index)
library(Matrix)
a <- sparseMatrix(index[interactomes$binding$V1])
head(index[interactomes$binding$V1])
a <- sparseMatrix(index[interactomes$binding$V1],index[interactomes$binding$V3],x=1)
sum(is.na(index[interactomes$binding$V1]))
which(is.na(index[interactomes$binding$V1]))
index[which(is.na(index[interactomes$binding$V1]))]
setDiff(interactomes$binding$V1,gref)
setdiff(interactomes$binding$V1,gref)
binding <- load_interactome("../interactomes/binding_hgnc2.sif")
a <- sparseMatrix(index[interactomes$binding$V1],index[interactomes$binding$V3],x=1)
a <- sparseMatrix(index[binding$V1],index[binding$V3],x=1)
head(a)
a <- sparseMatrix(index[binding$V1],index[binding$V3],x=1) +0
a
a <- sparseMatrix(index[binding$V1],index[binding$V3],x=1) + 1
head(a)
a[1:10,1:10]
a <- sparseMatrix(index[binding$V1],index[binding$V3],x=1) + 1 - 1
a[1:10,1:10]
a[1:10,1:10]
a[1:100,1:10]
a[1:100,1:100]
